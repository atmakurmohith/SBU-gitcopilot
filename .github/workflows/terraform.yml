name: Terraform

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev/test/uat/prod)'
        required: true
        type: choice
        options: [dev, test, uat, prod]
        default: dev
      operation:
        description: 'Terraform operation (plan/apply/destroy)'
        required: true
        type: choice
        options: [plan, apply, destroy]
        default: plan
      vm_os:
        description: 'VM OS (none/ubuntu/redhat/windows)'
        required: true
        type: choice
        options: [none, ubuntu, redhat, windows]
        default: none
      vm_size:
        description: 'VM size'
        required: false
        default: Standard_B1s
      auto_approve:
        description: 'Auto-approve apply/destroy (true/false)'
        required: false
        type: choice
        options: ['true','false']
        default: 'false'

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: Terraform ( ${{ github.event.inputs.environment }} - ${{ github.event.inputs.operation }} )

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'

      - name: Prepare env files
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ github.event.inputs.environment }}"
          ENV_DIR="envs/$ENV"
          mkdir -p "$ENV_DIR"

          # write backend.hcl if missing
          if [ ! -f "$ENV_DIR/backend.hcl" ]; then
            printf '%s\n%s\n' '# Local backend for demo/testing - replace with remote backend in production' 'path = "terraform.tfstate"' > "$ENV_DIR/backend.hcl"
          fi

          VM_OS="${{ github.event.inputs.vm_os }}"
          VM_SIZE="${{ github.event.inputs.vm_size }}"
          if [ "$VM_OS" = "none" ]; then CREATE_VM=false; else CREATE_VM=true; fi

          printf 'location = "eastus"\nresource_group_name = "rg-%s-gitcopilot"\ncreate_vm = %s\nvm_os = "%s"\nvm_size = "%s"\n' "$ENV" "$CREATE_VM" "$VM_OS" "$VM_SIZE" > "$ENV_DIR/terraform.tfvars"

          if [ "$VM_OS" = "ubuntu" ] || [ "$VM_OS" = "redhat" ]; then
            if [ -n "${{ secrets.VM_SSH_PUBLIC_KEY }}" ]; then
              printf 'vm_ssh_public_key = "%s"\n' "${{ secrets.VM_SSH_PUBLIC_KEY }}" >> "$ENV_DIR/terraform.tfvars"
            else
              printf '# WARNING: VM_SSH_PUBLIC_KEY secret not set\n' >> "$ENV_DIR/terraform.tfvars"
            fi
          fi

          if [ "$VM_OS" = "windows" ]; then
            if [ -n "${{ secrets.ADMIN_PASSWORD }}" ]; then
              printf 'vm_admin_password = "%s"\n' "${{ secrets.ADMIN_PASSWORD }}" >> "$ENV_DIR/terraform.tfvars"
            else
              printf '# WARNING: ADMIN_PASSWORD secret not set\n' >> "$ENV_DIR/terraform.tfvars"
            fi
          fi

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: terraform -chdir="envs/${{ github.event.inputs.environment }}" init -backend-config="backend.hcl"

      - name: Terraform Plan
        if: ${{ github.event.inputs.operation == 'plan' || github.event.inputs.operation == 'apply' }}
        run: terraform -chdir="envs/${{ github.event.inputs.environment }}" plan -var-file="terraform.tfvars" -out=tfplan

      - name: Terraform Apply
        if: ${{ github.event.inputs.operation == 'apply' }}
        run: |
          if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
            terraform -chdir="envs/${{ github.event.inputs.environment }}" apply -auto-approve tfplan
          else
            terraform -chdir="envs/${{ github.event.inputs.environment }}" apply tfplan
          fi

      - name: Terraform Destroy
        if: ${{ github.event.inputs.operation == 'destroy' }}
        run: |
          if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
            terraform -chdir="envs/${{ github.event.inputs.environment }}" destroy -auto-approve -var-file="terraform.tfvars"
          else
            terraform -chdir="envs/${{ github.event.inputs.environment }}" destroy -var-file="terraform.tfvars"
          fi
name: Terraform

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options: [dev, test, uat, prod]
        default: dev
      action:
        description: 'Terraform action'
        required: true
        type: choice
        options: [plan, apply, destroy]
        default: plan
      create_vm:
        description: 'Whether to create a VM'
        required: true
        type: choice
        options: ['true','false']
        default: 'false'
      vm_os:
        description: 'OS for the VM'
        required: true
        type: choice
        options: [none, ubuntu, redhat, windows]
        default: none
      vm_size:
        description: 'VM size'
        required: true
        type: string
        default: Standard_B1s
      auto_approve:
        description: 'Auto-approve terraform apply/destroy (true/false)'
        required: false
        type: choice
        options: ['true','false']
        default: 'false'

  push:
    branches:
      - feature/**
      - feature/terraform-initialcode

  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  terraform:
    name: Terraform (${{ github.event.inputs.environment }} - ${{ github.event.inputs.action }})
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    env:
      TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (service principal)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare terraform.tfvars
        run: |
          # convert create_vm input to boolean
          if [ "${{ github.event.inputs.create_vm }}" = "true" ]; then
            create_vm=true
          else
            create_vm=false
          fi

          vm_os="${{ github.event.inputs.vm_os }}"
          vm_size="${{ github.event.inputs.vm_size }}"

          ENV_DIR="envs/${{ github.event.inputs.environment }}"
          mkdir -p "$ENV_DIR"

          cat > "$ENV_DIR/terraform.tfvars" <<EOF
create_vm = ${create_vm}
vm_type = "${vm_os}"
vm_size = "${vm_size}"
vm_admin_username = "azureuser"
EOF

          if [ "$vm_os" = "ubuntu" ] || [ "$vm_os" = "redhat" ]; then
            if [ -n "${{ secrets.VM_SSH_PUBLIC_KEY }}" ]; then
              echo "vm_ssh_public_key = \"${{ secrets.VM_SSH_PUBLIC_KEY }}\"" >> "$ENV_DIR/terraform.tfvars"
            else
              echo "Warning: VM_SSH_PUBLIC_KEY secret not set; SSH-based VMs may fail"
            fi
          fi

          if [ "$vm_os" = "windows" ]; then
            if [ -n "${{ secrets.ADMIN_PASSWORD }}" ]; then
              echo "vm_admin_password = \"${{ secrets.ADMIN_PASSWORD }}\"" >> "$ENV_DIR/terraform.tfvars"
            else
              echo "Warning: ADMIN_PASSWORD secret not set; Windows VM creation may fail"
            fi
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          ENV_DIR="envs/${{ github.event.inputs.environment }}"
          terraform -chdir="$ENV_DIR" init -backend-config="backend.hcl"

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: |
          ENV_DIR="envs/${{ github.event.inputs.environment }}"
          terraform -chdir="$ENV_DIR" plan -var-file="terraform.tfvars" -out=tfplan

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          ENV_DIR="envs/${{ github.event.inputs.environment }}"
          if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
            terraform -chdir="$ENV_DIR" apply -auto-approve tfplan
          else
            terraform -chdir="$ENV_DIR" apply tfplan
          fi

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          ENV_DIR="envs/${{ github.event.inputs.environment }}"
          if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
            terraform -chdir="$ENV_DIR" destroy -auto-approve -var "create_vm=${{ github.event.inputs.create_vm }}" -var "vm_type=${{ github.event.inputs.vm_os }}"
          else
            terraform -chdir="$ENV_DIR" destroy -var "create_vm=${{ github.event.inputs.create_vm }}" -var "vm_type=${{ github.event.inputs.vm_os }}"
          fi
